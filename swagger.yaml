openapi: 3.0.0
info:
  title: 'Marketplace api'
  description: 'A api for marketplace'
  version: '1.0.0'
servers:
  - url: 'http://localhost:3000'

paths:
  /users:
    post:
      tags:
        - 'Users'
      summary: 'Create a new user'
      description: 'Create a new user in the store'
      responses:
        '201':
          $ref: '#/components/responses/CreateUser'
        '409':
          description: 'Conflict'
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'

  /users/login:
    post:
      tags:
        - 'Users'
      summary: 'Login a user'
      description: 'Login a user in the store'
      responses:
        '200':
          $ref: '#/components/responses/LoginUser'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/LoginUser'

  /store:
    post:
      tags:
        - 'Store'
      summary: 'Create a new store'
      description: 'Create a new store in the marketplace'
      requestBody:
        $ref: '#/components/requestBodies/CreateStore'
      security:
        - bearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/CreateStore'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'Conflict'

  /store/users:
    get:
      tags:
        - 'Store'
      summary: 'Get all users in a store'
      description: 'Get all users in a store'
      requestBody:
        $ref: '#/components/requestBodies/GetStoreUsers'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/GetStoreUsers'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'Conflict'

    put:
      tags:
        - 'Store'
      summary: 'Add a user to a store'
      description: 'Add a user to a store'
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AddUserToStore'
      responses:
        '200':
          description: 'Ok'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'Conflict'

  /store/all:
    get:
      tags:
        - 'Store'
      summary: 'Get all user stores'
      description: 'Get all user stores'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/GetAllUserStores'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'Conflict'

  /store/update:
    put:
      tags:
        - 'Store'
      summary: 'Update a store'
      description: 'Update a store'
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateStore'
      responses:
        '200':
          description: 'Ok'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'Conflict'

  /store/delete:
    delete:
      tags:
        - 'Store'
      security:
        - bearerAuth: []
      summary: 'Delete a store'
      description: 'Delete a store'
      requestBody:
        $ref: '#/components/requestBodies/DeleteStore'
      responses:
        '200':
          description: 'Ok'
        '401':
          description: 'Unauthorized'

  /store/user:
    delete:
      tags:
        - 'Store'
      summary: 'Delete a user from a store'
      description: 'Delete a user from a store'
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/RemoveUserFromStore'
      responses:
        '200':
          description: 'Ok'
        '401':
          description: 'Unauthorized'

  /categories:
    post:
      tags:
        - 'Categories'
      summary: 'Create a new product category'
      description: 'Create a new product category in the store'
      security:
        - bearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/CreateCategory'
        '409':
          description: 'Conflict'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/CreateCategory'

    get:
      tags:
        - 'Categories'
      summary: 'Get all product categories'
      description: 'Get all product categories in the store'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/GetAllCategories'
        '409':
          description: 'Conflict'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/GetAllCategories'

    put:
      tags:
        - 'Categories'
      summary: 'Update a product category'
      description: 'Update a product category in the store'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/UpdateCategory'
        '409':
          description: 'Conflict'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCategory'

    delete:
      tags:
        - 'Categories'
      summary: 'Delete a product category'
      description: 'Delete a product category in the store'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Ok'
        '409':
          description: 'Conflict'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/DeleteCategory'

  /products:
    post:
      tags:
        - 'Products'
      summary: 'Create a new product'
      description: 'Create a new product in the store'
      security:
        - bearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/CreateProduct'
        '409':
          description: 'Conflict'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/CreateProduct'

    put:
      tags:
        - 'Products'
      summary: 'Update a product'
      description: 'Update a product in the store'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/UpdateProduct'
        '409':
          description: 'Conflict'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/UpdateProduct'

    delete:
      tags:
        - 'Products'
      summary: 'Delete a product'
      description: 'Delete a product in the store'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: 'Ok'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/DeleteProduct'

  /products/all:
    get:
      tags:
        - 'Products'
      summary: 'Get all products'
      description: 'Get all products in the store'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/GetAllProducts'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/GetAllProducts'

  /products/category/all:
    get:
      tags:
        - 'Products'
      summary: 'Get all products by category'
      description: 'Get all products by category in the store'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/GetAllProductsByCategory'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/GetAllProductsByCategory'

  /roles:
    put:
      tags:
        - 'Roles'
      summary: 'Update a user role'
      description: 'Update a user role in the store'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Created'
        '401':
          description: 'Unauthorized'
        '409':
          description: 'Conflict'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRole'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  requestBodies:
    CreateUser:
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              name:
                type: 'string'
                example: 'John Doe'
              email:
                type: 'string'
                example: 'johndoe@email.com'
              password:
                type: 'string'
                example: '123456'
            required:
              - name
              - email
              - password
    LoginUser:
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              email:
                type: 'string'
                example: 'johndoe@email.com'
              password:
                type: 'string'
                example: '123456'
            required:
              - email
              - password

    CreateStore:
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              store_name:
                type: 'string'
                example: 'My first store'
              description:
                type: 'string'
                example: 'This is my first store'
              address:
                type: 'string'
                example: '1234 Main St'
              phone:
                type: 'string'
                example: '123-456-7890'
            required:
              - store_name
              - description
              - address
              - phone

    GetStoreUsers:
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
            required:
              - storeId

    AddUserToStore:
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
              usersIds:
                type: 'array'
                items:
                  type: 'string'
                  example: '1'

    UpdateStore:
      description: 'Updated'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
              address:
                type: 'string'
                example: '1234 Main St'
              description:
                type: 'string'
                example: 'This is my first store'
              ownerId:
                type: 'string'
                example: '1'
              phone:
                type: 'string'
                example: '123-456-7890'
              store_name:
                type: 'string'
                example: 'My first store'
            required:
              - storeId

    DeleteStore:
      description: 'Deleted'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
            required:
              - storeId

    RemoveUserFromStore:
      description: 'Deleted'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
              userId:
                type: 'string'
                example: '1'
            required:
              - storeId
              - userId

    CreateCategory:
      description: 'Created'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
              name:
                type: 'string'
                example: 'Electronics'
            required:
              - storeId
              - name

    GetAllCategories:
      description: 'Get all categories'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
            required:
              - storeId

    UpdateCategory:
      description: 'Updated'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
              name:
                type: 'string'
                example: 'current name'
              updatedName:
                type: 'string'
                example: 'new name'
            required:
              - storeId
              - name
              - updatedName

    DeleteCategory:
      description: 'Deleted'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
              name:
                type: 'string'
                example: 'Electronics'
            required:
              - storeId
              - name

    CreateProduct:
      description: 'Created'
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: 'Iphone 12'
              description:
                type: string
                example: 'This is a new phone'
              price:
                type: number
                example: 1000
              currency:
                type: string
                example: 'USD'
              category:
                type: string
                example: 'Electronics'
              storeId:
                type: string
                example: '1'
            required:
              - name
              - description
              - price
              - currency
              - category
              - storeId

    UpdateProduct:
      description: 'Updated'
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                example: '1'
              name:
                type: string
                example: 'Iphone 12'
              description:
                type: string
                example: 'This is a new phone'
              categoriesIds:
                type: array
                items:
                  type: string
                  example: '1'
              storeId:
                type: string
                example: '1'

              productPrice:
                type: object
                properties:
                  amount:
                    type: number
                    example: 1000
                  currency:
                    type: string
                    example: 'USD'

            required:
              - id
              - name
              - description
              - categoriesIds
              - storeId
              - productPrice

    GetAllProducts:
      description: 'Get all products'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
              page:
                type: 'number'
                example: 1
              pageSize:
                type: 'number'
                example: 10
            required:
              - storeId
              - page
              - pageSize

    GetAllProductsByCategory:
      description: 'Get all products by category'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: 'string'
                example: '1'
              page:
                type: 'number'
                example: 1
              pageSize:
                type: 'number'
                example: 10
              categoryName:
                type: 'string'
                example: 'Electronics'

    UpdateRole:
      description: 'Updated'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              updUserId:
                type: 'string'
                example: '1'
              role:
                type: 'string'
                example: 'Admin'
              storeId:
                type: 'string'
                example: '1'

    DeleteProduct:
      description: 'Deleted'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              storeId:
                type: string
                example: '1'
              productId:
                type: string
                example: '1'

  responses:
    CreateUser:
      description: 'Created'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              id:
                type: 'string'
                example: '1'
              name:
                type: 'string'
                example: 'John Doe'
              email:
                type: 'string'
                example: 'johndoe@email.com'

    LoginUser:
      description: 'Login'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              token:
                type: 'string'

    CreateStore:
      description: 'Created'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              id:
                type: 'string'
                example: '1'
              store_name:
                type: 'string'
                example: 'My first store'
              description:
                type: 'string'
                example: 'This is my first store'
              address:
                type: 'string'
                example: '1234 Main St'
              phone:
                type: 'string'
                example: '123-456-7890'
              ownerId:
                type: 'string'
                example: '1'
              users:
                type: 'array'
                items:
                  type: 'object'
                  properties:
                    id:
                      type: 'string'
                      example: '1'
                    name:
                      type: 'string'
                      example: 'John Doe'
                    email:
                      type: 'string'
                      example: 'johndoe@email.com'

    GetStoreUsers:
      description: 'Get users'
      content:
        application/json:
          schema:
            type: 'array'
            items:
              type: 'object'
              properties:
                id:
                  type: 'string'
                  example: '1'
                ownerId:
                  type: 'string'
                  example: '1'
                users:
                  type: 'array'
                  items:
                    type: 'object'
                    properties:
                      id:
                        type: 'string'
                        example: '1'
                      name:
                        type: 'string'
                        example: 'John Doe'
                      email:
                        type: 'string'
                        example: 'johndoe@email.com'

    GetAllUserStores:
      description: 'Get all stores'
      content:
        application/json:
          schema:
            type: 'array'
            items:
              type: 'object'
              properties:
                id:
                  type: 'string'
                  example: '1'
                store_name:
                  type: 'string'
                  example: 'My first store'
                description:
                  type: 'string'
                  example: 'This is my first store'
                address:
                  type: 'string'
                  example: '1234 Main St'
                phone:
                  type: 'string'
                  example: '123-456-7890'
                ownerId:
                  type: 'string'
                  example: '1'

    CreateCategory:
      description: 'Created'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              id:
                type: 'string'
                example: '1'
              name:
                type: 'string'
                example: 'Electronics'
              storeId:
                type: 'string'
                example: '1'

    GetAllCategories:
      description: 'Get all categories'
      content:
        application/json:
          schema:
            type: 'array'
            items:
              type: 'object'
              properties:
                id:
                  type: 'string'
                  example: '1'
                name:
                  type: 'string'
                  example: 'Electronics'
                storeId:
                  type: 'string'
                  example: '1'

    UpdateCategory:
      description: 'Updated'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              id:
                type: 'string'
                example: '1'
              name:
                type: 'string'
                example: 'new name'
              storeId:
                type: 'string'
                example: '1'

    CreateProduct:
      description: 'Created'
      content:
        application/json:
          schema:
            type: object
            properties:
              product_id:
                type: string
                example: '1'
              productName:
                type: string
                example: 'Iphone 12'
              productDescription:
                type: string
                example: 'This is a new phone'
              currency:
                type: string
                example: 'USD'
              productPrice:
                type: number
                example: 1000
              productCategories:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '1'
                    name:
                      type: string
                      example: 'Electronics'
                    storeId:
                      type: string
                      example: '1'

    UpdateProduct:
      description: 'Updated'
      content:
        application/json:
          schema:
            type: object
            properties:
              productId:
                type: string
                example: '1'
              productName:
                type: string
                example: 'Iphone 12'
              description:
                type: string
                example: 'This is a new phone'
              productPrice:
                type: number
                example: 1000
              currency:
                type: string
                example: 'USD'
              storeId:
                type: string
                example: '1'
              categories:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '1'
                    name:
                      type: string
                      example: 'Electronics'
                    storeId:
                      type: string
                      example: '1'

    GetAllProducts:
      description: 'Get all products'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              products:
                type: 'array'
                items:
                  type: 'object'
                  properties:
                    id:
                      type: 'string'
                      example: '1'
                    name:
                      type: 'string'
                      example: 'Iphone 12'
                    description:
                      type: 'string'
                      example: 'This is a new phone'
                    productsPrice:
                      type: 'object'
                      properties:
                        amount:
                          type: 'number'
                          example: 1000
                        currency:
                          type: 'string'
                          example: 'USD'
                        id:
                          type: 'string'
                          example: '1'
              total:
                type: 'number'
                example: 1

    GetAllProductsByCategory:
      description: 'Get all products by category'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              products:
                type: 'array'
                items:
                  type: 'object'
                  properties:
                    id:
                      type: 'string'
                      example: '1'
                    name:
                      type: 'string'
                      example: 'Iphone 12'
                    description:
                      type: 'string'
                      example: 'This is a new phone'
                    productsPrice:
                      type: 'object'
                      properties:
                        amount:
                          type: 'number'
                          example: 1000
                        currency:
                          type: 'string'
                          example: 'USD'
                        id:
                          type: 'string'
                          example: '1'
              total:
                type: 'number'
                example: 1
